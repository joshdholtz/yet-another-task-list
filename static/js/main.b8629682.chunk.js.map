{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","require","App","props","_this","Object","classCallCheck","this","json","possibleConstructorReturn","getPrototypeOf","call","load","value","yaml","safeDump","state","last_loaded_value","visual_state","key","data","window","localStorage","setItem","JSON","stringify","getItem","parse","react_default","a","createElement","className","renderToolbar","id","renderEditor","renderVisual","_this2","hasChange","disabled","isEditor","onClick","setState","safeLoad","store","_this3","react_codemirror2","options","mode","theme","lineNumbers","height","onBeforeChange","editor","onChange","rows","_this4","_","map","row","label","subtasks","effort","priority","completed","subRows","length","renderVisualRows","opacity","vertPadding","textDecoration","style","padding","concat","projects","_this5","transform","result","el","push","renderVisualProjects","console","log","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8629682.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport _ from 'lodash';\nimport yaml from 'js-yaml';\n\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/theme/material.css');\nrequire('codemirror/theme/neat.css');\nrequire('codemirror/mode/yaml/yaml.js');\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    \n    const json = this.load('json')\n    const value = yaml.safeDump (json)\n    \n    this.state = {\n      \"last_loaded_value\": value,\n      \"value\": value,\n      \"visual_state\": \"editor\"\n    }\n\n  }\n\n  store(key, data) {\n    return window.localStorage.setItem(key, JSON.stringify(data))\n  }\n\n  load(key) {\n    var data = window.localStorage.getItem(key)\n    return JSON.parse(data)\n  }\n\n  isEditor() {\n    return this.state.visual_state === \"editor\"\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        { this.renderToolbar() }\n        <div id=\"workarea\">\n          { this.renderEditor() }\n          { this.renderVisual() }\n        </div>\n      </div>\n    );\n  }\n\n  renderToolbar() {\n    const hasChange = this.state.value !== this.state.last_loaded_value\n\n    return (\n      <div id=\"toolbar\">\n        <div id=\"toolbar-left\">\n          <button\n            disabled={this.isEditor()}\n            onClick={() => {\n              this.setState({\"visual_state\": \"editor\"})\n            }}>\n            Editor\n          </button>\n          <button\n            disabled={!this.isEditor()}\n            onClick={() => {\n              this.setState({\"visual_state\": \"graph\"})\n            }}>\n            Visual\n          </button>\n        </div>\n        <div id=\"toolbar-right\">\n          <button\n            disabled={!hasChange}\n            onClick={() => {\n              this.setState({\"last_loaded_value\": this.state.value});\n              const json = yaml.safeLoad(this.state.value)\n              const savedValue = this.store('json', json)\n            }}>\n            Save\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  renderEditor() {\n    if (!this.isEditor()) {\n      return null;\n    }\n\n    const options = {\n      mode: 'yaml',\n      theme: 'material',\n      lineNumbers: true,\n      height: 'auto'\n    }\n\n    return (\n      <CodeMirror\n        value={this.state.value}\n        options={options}\n        onBeforeChange={(editor, data, value) => {\n          this.setState({value})\n        }}\n        onChange={(editor, data, value) => {\n\n        }}\n      />\n    )\n  }\n\n  renderVisualRows(rows) {\n    return _.map(rows, (row) => {\n      const label = row['name'];\n      const subtasks = row['subtasks'] || [];\n      const effort = row['effort'] || 1;\n      const priority = row['priority'] || 1;\n      const completed = row['completed'] || false;\n\n      let subRows = null\n      if (subtasks.length > 0) {\n        subRows = this.renderVisualRows(subtasks);\n      }\n\n      let opacity = 0.3\n      switch (priority) {\n        case 1:\n          opacity = 0.4\n          break;\n        case 2:\n          opacity = 0.5\n          break;\n        case 3:\n          opacity = 0.6\n          break;\n        case 4:\n          opacity = 0.8\n          break;\n        case 5:\n          opacity = 1.0\n          break;\n        default:\n          opacity = 0.3\n          break;\n      }\n\n      let vertPadding = 5\n      switch (effort) {\n        case 1:\n          vertPadding = 5\n          break;\n        case 2:\n          vertPadding = 10\n          break;\n        case 3:\n          vertPadding = 20\n          break;\n        case 4:\n          vertPadding = 30\n          break;\n        case 5:\n          vertPadding = 40\n          break;\n        default:\n          vertPadding = 5\n          break;\n      }\n\n      let textDecoration = \"\"\n      if (completed) {\n        textDecoration = \"line-through\"\n      }\n\n      const style = {\n        opacity: opacity,\n        padding: `${vertPadding}px 10px`,\n        textDecoration: textDecoration\n      }\n\n      return (\n        <div className=\"visual-row\" key={label}>\n          <div className=\"visual-row-label\" style={style}>\n            { label }\n          </div>\n          <div className=\"visual-row-content\">\n            { subRows }\n          </div>\n        </div>\n        )\n    });\n  }\n\n  renderVisualProjects(projects) {\n    const rows = _.transform(projects, (result, value, key) => {\n      const subRows = this.renderVisualRows(value)\n\n      const el = (\n        <div className=\"visual-row\" key={key}>\n          <div className=\"visual-row-label\">\n            { key }\n          </div>\n          <div className=\"visual-row-content\">\n            { subRows }\n          </div>\n        </div>\n        )\n      result.push(el)\n    }, []);\n\n    return rows\n  }\n\n  renderVisual() {\n    if (this.isEditor()) {\n      return null;\n    }\n\n    const json = yaml.safeLoad(this.state.value)\n    const projects = json[\"projects\"]\n    const rows = this.renderVisualProjects(projects)\n\n    console.log(\"projects\", projects);\n\n    return (\n      <div className=\"visual\">\n        { rows }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}